## DI, IoC, 그리고 Bean

### DI (Dependency Injection, 의존성 주입)
- 강한 결합은 문제점을 야기시킵니다.
- Repository 생성자 변경에 의해 그에 속한 모든 Controller와 모든 Service 코드 변경 필요
- 그래서 이 문제점을 해결하기 위해 '느슨한 결합' 을 만듭니다.

###### 느슨한 결합?
- 각 객체에 대한 객체 생성은 딱 1번만 한다.
- 생성된 객체를 모든 곳에서 재사용!
- 느슨한 결합을 통해 Repository 생성자 변경은 연계적인 피해 확산을 방지
- 생성자가 변경되도 모든 Controller 에서 Controller 변경을 하지 않아도 된다.

### IoC (Inversion of Control, 제어의 역전)
- 프로그램의 제어 흐름이 뒤바뀐 것을 말한다.

### Bean
- 스프링이 관리하는 객체
- 스프링 IoC 컨테이너 : '빈'을 모아둔 통

##### 스프링 컨테이너
- 스프링 빈의 생명 주기를 관리하며, 생성된 스프링 빈들에게 추가적인 기능을 제공하는 역할
- IoC와 DI 원리가 컨테이너에 적용
- 개발자는 new 연산자, 인터페이스 호출, 팩토리 호출 방식으로 객체를 생성하고 소멸하지만, 스프링 컨테이너를 사용하면 해당 역할을 대신해준다.
- 제어 흐름을 외부에서 관리하게 된다.
- 객체들 간의 의존 관계를 스프링 컨테이너가 런타임 과정에서 알아서 만들어준다.
